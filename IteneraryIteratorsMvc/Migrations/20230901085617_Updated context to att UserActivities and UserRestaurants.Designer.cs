// <auto-generated />
using System;
using IteneraryIteratorsMvc.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace IteneraryIteratorsMvc.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20230901085617_Updated context to att UserActivities and UserRestaurants")]
    partial class UpdatedcontexttoattUserActivitiesandUserRestaurants
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("IteneraryIteratorsMvc.Models.Activity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Activities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CityId = 1,
                            Description = "Vasamuseet houses a historic vessel, the Vasa warship, offering an immersive experience into maritime history and Swedish naval heritage.",
                            ImageUrl = "/Image/Vasamuseet.jpg",
                            Name = "Vasamuseet"
                        },
                        new
                        {
                            Id = 2,
                            CityId = 1,
                            Description = "A cultural oasis, Skansen introduces visitors to the charm of Sweden's past with its open-air museum and zoo, allowing guests to explore history and wildlife.",
                            ImageUrl = "/Image/Skansen.jpg",
                            Name = "Skansen"
                        },
                        new
                        {
                            Id = 3,
                            CityId = 1,
                            Description = "An artistic haven, Bonniers konsthall showcases contemporary art exhibitions, providing a space for art enthusiasts to immerse themselves in diverse creative expressions.",
                            ImageUrl = "/Image/Bonnier.jpeg",
                            Name = "Bonniers konsthall"
                        },
                        new
                        {
                            Id = 4,
                            CityId = 2,
                            Description = " Liseberg is a thrilling amusement park offering a blend of exhilarating rides, captivating performances, and family-friendly entertainment for all ages.",
                            ImageUrl = "/Image/Liseberg.jpg",
                            Name = "Liseberg"
                        },
                        new
                        {
                            Id = 5,
                            CityId = 2,
                            Description = "Nature enthusiasts find solace at Slottsskogen, a vast urban park where tranquility meets wildlife, offering serene walks and an opportunity to connect with nature.",
                            ImageUrl = "/Image/Slottsskogen.jpg",
                            Name = "Slottsskogen"
                        },
                        new
                        {
                            Id = 6,
                            CityId = 2,
                            Description = "Maritiman beckons maritime enthusiasts with its collection of ships and boats, offering an interactive journey through seafaring history and maritime traditions.",
                            ImageUrl = "/Image/Maritiman.jpg",
                            Name = "Maritiman"
                        },
                        new
                        {
                            Id = 7,
                            CityId = 3,
                            Description = "Linnéträdgården is a botanical oasis celebrating the legacy of Carl Linnaeus, featuring a variety of plants and settings that transport visitors to a bygone era.",
                            ImageUrl = "/Image/Linnetradgarden.jpg",
                            Name = "Linnéträdgården"
                        },
                        new
                        {
                            Id = 8,
                            CityId = 3,
                            Description = "Botaniska Trädgården is a botanical paradise, offering an immersive experience through diverse plant species, greenhouses, and serene landscapes.",
                            ImageUrl = "/Image/Botaniska_Tradgarden.jpg",
                            Name = "Botaniska Trädgården"
                        },
                        new
                        {
                            Id = 9,
                            CityId = 3,
                            Description = "Uppsala Domkyrka, the Uppsala Cathedral, stands as a majestic religious site, inviting visitors to explore its stunning architecture and historical significance.\r\n",
                            ImageUrl = "/Image/Uppsala_domkyrka.jpg",
                            Name = "Uppsala Domkyrka"
                        },
                        new
                        {
                            Id = 10,
                            CityId = 4,
                            Description = "Kungsparken offers a tranquil urban escape, combining scenic beauty with historic sculptures and a serene lake, making it a perfect spot for relaxation.",
                            ImageUrl = "/Image/Kungsparken-Malmo.jpg",
                            Name = "Kungsparken"
                        },
                        new
                        {
                            Id = 11,
                            CityId = 4,
                            Description = "A cycling adventure through Malmö, the Private Bike Tour offers an exploration of the city's landmarks and hidden gems, guided by local expertise.",
                            ImageUrl = "/Image/MalmoBikeTour.jpg",
                            Name = "Malmö Private Bike Tour"
                        },
                        new
                        {
                            Id = 12,
                            CityId = 4,
                            Description = "Malmöhus slott, Malmö Castle, encapsulates history within its walls, inviting visitors to delve into centuries of culture and heritage through exhibitions and architecture.",
                            ImageUrl = "/Image/MalmoHusSlott.jpg",
                            Name = "Malmöhus slott"
                        },
                        new
                        {
                            Id = 13,
                            CityId = 5,
                            Description = " Located in Kiruna, Aurora Sky Station offers a chance to witness the mesmerizing Northern Lights, providing a celestial experience amidst the Arctic wilderness.",
                            ImageUrl = "/Image/AuroraSkyStation-Kiruna.jpg",
                            Name = "Aurora Sky Station"
                        },
                        new
                        {
                            Id = 14,
                            CityId = 5,
                            Description = "Silverfallet is a captivating waterfall in Kiruna, offering a picturesque natural setting where guests can revel in the serene beauty of cascading waters.",
                            ImageUrl = "/Image/Silverfallet-Kiruna.jpg",
                            Name = "Silverfallet"
                        },
                        new
                        {
                            Id = 15,
                            CityId = 5,
                            Description = "LKAB's Visitor Centre provides insights into Kiruna's mining heritage, offering a glimpse into the region's mining history and its impact on the community.",
                            ImageUrl = "/Image/LKABVisitorCenter-Kiruna.jpg",
                            Name = "LKAB:s Visitor Centre"
                        });
                });

            modelBuilder.Entity("IteneraryIteratorsMvc.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("IteneraryIteratorsMvc.Models.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Stockholm"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Göteborg"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Uppsala"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Malmö"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Kiruna"
                        });
                });

            modelBuilder.Entity("IteneraryIteratorsMvc.Models.Restaurant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Restaurants");

                    b.HasData(
                        new
                        {
                            Id = 1000,
                            CityId = 1,
                            Description = "A serene dining spot offering a diverse culinary experience, Mahalo entices with its elegant ambiance and delectable menu, inviting patrons to savor a mix of flavors.",
                            ImageUrl = "/Image/Mahalo.jpeg",
                            Name = "Mahalo"
                        },
                        new
                        {
                            Id = 2000,
                            CityId = 1,
                            Description = "An enchanting eatery, Linglong promises a gastronomic journey through its array of dishes, serving up a fusion of traditional and contemporary tastes that captivate the senses.",
                            ImageUrl = "/Image/linglong.jpg",
                            Name = "Linglong"
                        },
                        new
                        {
                            Id = 3000,
                            CityId = 1,
                            Description = "Nestled in the heart of the city, Tranan beckons diners with its cozy atmosphere and an array of dishes that reflect the essence of the local culinary scene.",
                            ImageUrl = "/Image/Tranan.jpg",
                            Name = "Tranan"
                        },
                        new
                        {
                            Id = 4000,
                            CityId = 2,
                            Description = "A culinary haven, Daawat tempts with its aromatic creations inspired by authentic flavors, offering a taste of the rich culinary heritage of the region.",
                            ImageUrl = "/Image/daawat.jpg",
                            Name = "Daawat"
                        },
                        new
                        {
                            Id = 5000,
                            CityId = 2,
                            Description = " With a warm and welcoming ambiance, Panos Panos Tavern celebrates the art of Mediterranean cuisine, inviting guests to indulge in dishes that evoke the sun-soaked shores.",
                            ImageUrl = "/Image/panos.jpg",
                            Name = "Panos Panos Tavern"
                        },
                        new
                        {
                            Id = 6000,
                            CityId = 2,
                            Description = "A culinary destination, Bord 27 invites patrons to relish an array of delightful dishes curated with passion, representing a symphony of tastes and textures.",
                            ImageUrl = "/Image/bord27.jpg",
                            Name = "Bord 27"
                        },
                        new
                        {
                            Id = 7000,
                            CityId = 3,
                            Description = " A charming spot, Aaltos Italian Grill & Garden delights with its blend of traditional and innovative Italian fare, providing an inviting setting for a memorable dining experience.",
                            ImageUrl = "/Image/Aaltos.jpg",
                            Name = "Aaltos Italian Grill & Garden"
                        },
                        new
                        {
                            Id = 8000,
                            CityId = 3,
                            Description = "Nestled by the waterfront, Hambergs Fisk celebrates the bounties of the sea, offering a seafood-centric menu that showcases the freshness and flavors of the ocean.",
                            ImageUrl = "/Image/Hamberg.jpg",
                            Name = "Hambergs Fisk"
                        },
                        new
                        {
                            Id = 9000,
                            CityId = 3,
                            Description = "A modern and sophisticated eatery, Miss Voon presents a fusion of Asian flavors with a contemporary twist, promising a culinary journey that excites the palate.",
                            ImageUrl = "/Image/Miss.jpg",
                            Name = "Miss Voon"
                        },
                        new
                        {
                            Id = 1100,
                            CityId = 4,
                            Description = "A culinary masterpiece, Vollmers offers an exceptional dining experience, crafting dishes that epitomize artistry and innovation, inviting guests to embark on a culinary exploration.",
                            ImageUrl = "/Image/Vollmers.jpg",
                            Name = "Vollmers"
                        },
                        new
                        {
                            Id = 1200,
                            CityId = 4,
                            Description = "With an atmosphere of elegance, Aster redefines modern dining with its creative menu that marries traditional elements with avant-garde culinary techniques.",
                            ImageUrl = "/Image/aster.jpeg",
                            Name = "Aster"
                        },
                        new
                        {
                            Id = 1300,
                            CityId = 4,
                            Description = "A hidden gem, Lyran Matbar captures the essence of its surroundings, serving dishes that reflect the region's bounty and cultural heritage in every bite.",
                            ImageUrl = "/Image/Lyran.jpg",
                            Name = "Lyran Matbar"
                        },
                        new
                        {
                            Id = 1400,
                            CityId = 5,
                            Description = "Known for its flavorsome offerings, Annis Grill beckons with its rich and succulent dishes, providing a culinary journey that celebrates the art of grilling.",
                            ImageUrl = "/Image/Annis.jpg",
                            Name = "Annis Grill"
                        },
                        new
                        {
                            Id = 1500,
                            CityId = 5,
                            Description = "Set against a stunning backdrop, Enoks i Láddjujávri combines breathtaking views with delectable fare, giving guests an opportunity to relish nature's beauty alongside their meal.",
                            ImageUrl = "/Image/Enok.jpg",
                            Name = "Enoks i Láddjujávri"
                        },
                        new
                        {
                            Id = 1600,
                            CityId = 5,
                            Description = "Embracing its rustic charm, Nikkaluokta Sarri immerses diners in traditional flavors, offering a taste of authentic cuisine that pays homage to local heritage.",
                            ImageUrl = "/Image/Nik.jpg",
                            Name = "Nikkaluokta Sarri"
                        });
                });

            modelBuilder.Entity("IteneraryIteratorsMvc.Models.UserActivity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ActivityId")
                        .HasColumnType("int");

                    b.Property<int>("IdUser")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.HasIndex("UserId");

                    b.ToTable("UserActivities");
                });

            modelBuilder.Entity("IteneraryIteratorsMvc.Models.UserRestaurant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("IdUser")
                        .HasColumnType("int");

                    b.Property<int>("RestaurantId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RestaurantId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRestaurants");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("IteneraryIteratorsMvc.Models.Activity", b =>
                {
                    b.HasOne("IteneraryIteratorsMvc.Models.City", "City")
                        .WithMany("Activities")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("IteneraryIteratorsMvc.Models.Restaurant", b =>
                {
                    b.HasOne("IteneraryIteratorsMvc.Models.City", "City")
                        .WithMany("Restaurants")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("IteneraryIteratorsMvc.Models.UserActivity", b =>
                {
                    b.HasOne("IteneraryIteratorsMvc.Models.Activity", "Activity")
                        .WithMany("UserActivities")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IteneraryIteratorsMvc.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Activity");

                    b.Navigation("User");
                });

            modelBuilder.Entity("IteneraryIteratorsMvc.Models.UserRestaurant", b =>
                {
                    b.HasOne("IteneraryIteratorsMvc.Models.Restaurant", "Restaurant")
                        .WithMany("UserRestaurants")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IteneraryIteratorsMvc.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Restaurant");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("IteneraryIteratorsMvc.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("IteneraryIteratorsMvc.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IteneraryIteratorsMvc.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("IteneraryIteratorsMvc.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IteneraryIteratorsMvc.Models.Activity", b =>
                {
                    b.Navigation("UserActivities");
                });

            modelBuilder.Entity("IteneraryIteratorsMvc.Models.City", b =>
                {
                    b.Navigation("Activities");

                    b.Navigation("Restaurants");
                });

            modelBuilder.Entity("IteneraryIteratorsMvc.Models.Restaurant", b =>
                {
                    b.Navigation("UserRestaurants");
                });
#pragma warning restore 612, 618
        }
    }
}
